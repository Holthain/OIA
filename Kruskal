INPUT
4
1 2 5
1 3 5
1 4 5
1 5 5
1
2 3 2
6
1 2 5
1 3 5
1 4 5
1 5 5
3 4 8
4 5 8

#include <bits/stdc++.h>
#define MAX 10000
using namespace std;

struct cmp{
    operator()(pair<pair<int,int>,int> a, pair<pair<int,int>,int> b){
        return a.second < b.second;
    }
};

int n,a,b,c,original=0,peso=0,UnionFind[MAX];
vector< pair<pair<int,int>,int> > lista;

int Find(int a){
    if(UnionFind[a] == a) return a;
    return UnionFind[a] = Find(UnionFind[a]);
}

bool SameComponent(int a, int b){
    return Find(a) == Find(b);
}

void Union(int a, int b){
    UnionFind[Find(a)]=Find(b);
}

int main(){
    ifstream fin("in.txt");
    fin >> n;
    for(int i=0;i<n;i++){
        fin >> a >> b >> c;
        original+=c;
    }
    cout << original << endl;

    fin >> n;
    for(int i=0;i<n;i++){
        fin >> a >> b >> c;
        lista.push_back(make_pair(make_pair(a,b),c));
        UnionFind[a]=a;
        UnionFind[b]=b;
    }
    fin >> n;
    for(int i=0;i<n;i++){
        fin >> a >> b >> c;
        lista.push_back(make_pair(make_pair(a,b),c));
        UnionFind[a]=a;
        UnionFind[b]=b;
    }

    sort(lista.begin(),lista.end(),cmp());

    for(int i=0;i<lista.size();i++){
        if(!SameComponent(lista[i].first.first, lista[i].first.second)){
            peso+=lista[i].second;
            Union(lista[i].first.first, lista[i].first.second);
        }
    }

    cout << peso << endl;
}
