#include <bits/stdc++.h>
#define MAX 10000
using namespace std;
struct pos{
    pair<int,int> inicio, curva, a;
    int l, dir;
    bool d;
};
int m[MAX][MAX], n, inicios, largo;
int dir[2][4] = { {1,-1,0,0},{0,0,1,-1} };
queue< pos > Q;
int maxL=0, maxC;
pos maxP;

void saveMax(pos a){
    if(a.l > maxL){
        maxL = a.l;
        maxP = a;
        maxC = 1;
    } else if(a.l == maxL)
        maxC++;

}

int main(){
    ifstream fin("in.txt");
    fin >> n;

    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            fin >> m[i][j];
        }
    }

    pos temp, sample, act;
    sample.d = false;
    sample.l = 0;
    sample.dir = -1;

    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            sample.inicio.first = i;
            sample.inicio.second = j;
            sample.a.first = i;
            sample.a.second = j;
            Q.push(sample);
            while(!Q.empty()){
                act = Q.front();
                Q.pop();

                saveMax(act);

                for(int i=0;i<4;i++){
                    temp = act;
                    if(act.d){
                        if(act.dir == i){
                            temp.a.first = act.a.first + dir[0][i];
                            temp.a.second = act.a.second + dir[1][i];
                            temp.l++;

                            if( (temp.a.first > 0 && temp.a.first <= n) && (temp.a.second > 0 && temp.a.second <= n))
                                if( m[temp.a.first][temp.a.second] < m[act.a.first][act.a.second] )
                                    Q.push(temp);
                        }
                    } else {
                        if(act.dir == -1)
                            temp.dir = i;
                        else if(act.dir != i){
                            temp.d = true;
                            temp.dir = i;
                            temp.curva.first = temp.a.first;
                            temp.curva.second = temp.a.second;
                        }
                        temp.a.first = act.a.first + dir[0][i];
                        temp.a.second = act.a.second + dir[1][i];
                        temp.l++;

                        if( (temp.a.first > 0 && temp.a.first <= n) && (temp.a.second > 0 && temp.a.second <= n))
                            if( m[temp.a.first][temp.a.second] < m[act.a.first][act.a.second] )
                                Q.push(temp);
                    }
                }
            }
        }
    }

    if(maxL == 0){
        cout << "Sin pista" << endl;
    } else {
        cout << "El largo de la pista es " << maxL << "." << endl;
        cout << "Hay " << maxC << " inicios de pistas." << endl;
        cout << "Inicio:(" << maxP.inicio.first << ',' << maxP.inicio.second;
        cout << ") Curva:(" << maxP.curva.first << ',' << maxP.curva.second;
        cout << ") Fin:("  << maxP.a.first << ',' << maxP.a.second << ")" << endl;
    }

}
